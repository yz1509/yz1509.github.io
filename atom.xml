<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>兔子和阿铁</title>
  
  <subtitle>旅の途中</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yz1509.github.io/"/>
  <updated>2018-07-27T14:20:16.001Z</updated>
  <id>https://yz1509.github.io/</id>
  
  <author>
    <name>yz1509</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>图</title>
    <link href="https://yz1509.github.io//posts/ee040603/"/>
    <id>https://yz1509.github.io//posts/ee040603/</id>
    <published>2018-07-26T05:17:37.000Z</published>
    <updated>2018-07-27T14:20:16.001Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是图"><a href="#什么是图" class="headerlink" title="什么是图"></a>什么是图</h1><p><strong>定义</strong> 一个图 $G = (V, E)$ 由顶点（或结点）的非空集 $V$ 和边的集合 $E$ 构成，每条边有一个或两个顶点与它相连，这样的顶点称为边的端点。边连接它的端点。</p><h2 id="图的表示"><a href="#图的表示" class="headerlink" title="图的表示"></a>图的表示</h2><ul><li>邻接链表：稀疏图</li><li>邻接矩阵：稠密图，或者需要快速判断任意两个结点之间是否有边的情况<br><img src="/posts/ee040603/001.png" alt="图的表示"></li></ul><h1 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** u.color 存放结点 u 的颜色属性</span></span><br><span class="line"><span class="comment">  * 白色表示未被发现</span></span><br><span class="line"><span class="comment">  * 灰色表示邻接结点中还有白色结点</span></span><br><span class="line"><span class="comment">  * 黑色表示邻接结点均被发现</span></span><br><span class="line"><span class="comment">  * u.π 存放前驱结点</span></span><br><span class="line"><span class="comment">  * u.d 存放从源结点 s 到结点 u 之间的距离</span></span><br><span class="line"><span class="comment">  **/</span> </span><br><span class="line">BFS(G, s)</span><br><span class="line">    <span class="keyword">for</span> each vertex u in G.V - &#123;s&#125;</span><br><span class="line">        u.color = WHITE</span><br><span class="line">        u.d = ∞</span><br><span class="line">        u.π = NIL</span><br><span class="line">    s.color = BLACK</span><br><span class="line">    s.d = <span class="number">0</span></span><br><span class="line">    s.π = NIL</span><br><span class="line">    Q = ∅</span><br><span class="line">    ENQUEUE(Q, s)</span><br><span class="line">    <span class="keyword">while</span> Q ≠ ∅<span class="comment">// 灰色结点的集合</span></span><br><span class="line">        u = DEQUEUE(Q)</span><br><span class="line">        <span class="keyword">for</span> each v in G.Adj[u]</span><br><span class="line">            <span class="keyword">if</span> v.color == WHITE</span><br><span class="line">                v.color = GRAY</span><br><span class="line">                v.d = u.d + <span class="number">1</span></span><br><span class="line">                v.π = u</span><br><span class="line">                ENQUEUE(Q, v)</span><br><span class="line">        u.color = BLACK</span><br></pre></td></tr></table></figure><blockquote><p>BFS 的总运行时间为 O(V + E)</p></blockquote><p><img src="/posts/ee040603/002.png" alt="BFS"></p><h2 id="BFS-的性质"><a href="#BFS-的性质" class="headerlink" title="BFS 的性质"></a>BFS 的性质</h2><ol><li>BFS 可以计算出从源结点 s 到 结点 v 的最短路径。</li><li>BFS 在对图进行搜索的过程中将创建一棵广度优先树</li></ol><h1 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** u.color 存放结点 u 的颜色属性</span></span><br><span class="line"><span class="comment">  * 白色表示未被发现</span></span><br><span class="line"><span class="comment">  * 灰色表示邻接结点中还有白色结点</span></span><br><span class="line"><span class="comment">  * 黑色表示邻接结点均被发现</span></span><br><span class="line"><span class="comment">  * u.π 存放前驱结点</span></span><br><span class="line"><span class="comment">  * u.d 记录结点 u 第一次被发现的时间</span></span><br><span class="line"><span class="comment">  * u.f 记录搜索完成对 u 的邻接链表扫描的事件</span></span><br><span class="line"><span class="comment">  **/</span> </span><br><span class="line">DFS(G)</span><br><span class="line">    <span class="keyword">for</span> each vertex u in G.V</span><br><span class="line">        u.color = WHITE</span><br><span class="line">        u.π = NIL</span><br><span class="line">    time = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> each vertex u in G.V</span><br><span class="line">        <span class="keyword">if</span> u.color == WHITE</span><br><span class="line">            DFS-VISIT(G, u)</span><br><span class="line"></span><br><span class="line">DFS-VISIT(G, u)</span><br><span class="line">    time = time + <span class="number">1</span><span class="comment">// white vertex u has just been discovered</span></span><br><span class="line">    u.d = time</span><br><span class="line">    u.color = GRAY</span><br><span class="line">    <span class="keyword">for</span> each v in G.Adj[u]<span class="comment">// explore edge (u, v)</span></span><br><span class="line">        <span class="keyword">if</span> v.color == WHITE</span><br><span class="line">            v.π = u</span><br><span class="line">            DFS-VISIT(G, v)</span><br><span class="line">    u.color = BLACK<span class="comment">// blacken u, it is finished</span></span><br><span class="line">    time = time + <span class="number">1</span></span><br><span class="line">    u.f = time</span><br></pre></td></tr></table></figure><blockquote><p>DFS 的总运行时间为 O(V + E)</p></blockquote><p><img src="/posts/ee040603/003.png" alt="DFS"></p><h2 id="DFS-的性质"><a href="#DFS-的性质" class="headerlink" title="DFS 的性质"></a>DFS 的性质</h2><ol><li>括号化定理：在对有向或无向图进行的任意 DFS 中，对于任意两个结点 u 和 v 来说，下面三种情况只有一种成立：<ul><li>区间 $[u.d, u.f]$ 和 区间 $[v.d, v.f$ 完全分离，在深度优先森林中，结点 u 不是结点 v 的后代，结点 v 也不是结点 u 的后代</li><li>区间 $[u.d, u.f]$ 完全包含在 区间 $[v.d, v.f$ 内，在深度优先树中，结点 u 是结点 v 的后代</li><li>区间 $[v.d, v.f]$ 完全包含在 区间 $[u.d, u.f$ 内，在深度优先树中，结点 v 是结点 u 的后代</li></ul></li><li>边的分类<ul><li>树边：是深度优先森林 $G_π$ 中的边。如果结点  v 是因算法对边 (u, v) 的探索而首先被发现，则 (u, v) 是一条树边</li><li>后向边：是将结点 u 连接到其在深度优先树中祖先结点 v 的边。由于有向图中可以有自循环，自循环也被认为是后向边</li><li>前向边：是将结点 u 连接到其在深度优先树中后代结点 v 的边</li><li>横向边：其他所有的边<blockquote><p>在对无向图 G 进行深度优先搜索时，每条边要么是树边，要么是后向边。</p></blockquote></li></ul></li></ol><h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><p>对于一个有向无环图 G(V, E) 来说，其拓扑排序是 G 中所有结点的一种线性次序，该次序满足如下条件：如果图 G 包含边 (u, v)，则结点 u 在拓扑排序中处于结点 v 的前面。<br><img src="/posts/ee040603/004.png" alt="拓扑排序"><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TOPOLOGICAL-SORT(G)</span><br><span class="line">    call DFS(G) to compute finishing time v.f for each vertex v</span><br><span class="line">    as each vertex is finished, insert it onto the front of a linked <span class="built_in">list</span></span><br><span class="line">    <span class="keyword">return</span> the linked of <span class="built_in">list</span> of vertices</span><br></pre></td></tr></table></figure></p><h2 id="强连通分量"><a href="#强连通分量" class="headerlink" title="强连通分量"></a>强连通分量</h2><p><strong>定义：</strong> 如果一个有向图中任意两个顶点互相可达，则该有向图是强连通的。<br>图 G 的转置 $G^T = (V, E^T)$，其中 $E^T = {(u, v): (u, v) \in E}$。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">STRONGLY-CONNECTED-COMPONENTS(G)</span><br><span class="line">    call DFS(G) to compute finishing time u.f for each vertex u</span><br><span class="line">    compute G^T</span><br><span class="line">    call DFS(G^T), but in the main loop of DFS, consider the vertices</span><br><span class="line">        in order of decreasing u.f (as computed in line <span class="number">1</span>)</span><br><span class="line">    output the vertices of each tree in the depth-first forest formed</span><br><span class="line">        in line <span class="number">3</span> as a separate strongly connected component</span><br></pre></td></tr></table></figure></p><p><img src="/posts/ee040603/005.png" alt="强连通分量"></p><h1 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h1><p><strong>定义：</strong> 连通加权图里的最小生成树是具有边的权值之和最小的生成树。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在每遍循环之前，A 是某棵最小生成树的一个子集</span></span><br><span class="line"><span class="comment">// 加入集合 A 而不会破坏 A 的循环不变式的边称为集合 A 的安全边</span></span><br><span class="line">GENERIC-MST(G, w)</span><br><span class="line">    A = ∅</span><br><span class="line">    <span class="keyword">while</span> A does <span class="keyword">not</span> form a spanning tree</span><br><span class="line">        find an edge(u, v) that is safe <span class="keyword">for</span> A</span><br><span class="line">        A = A ∪ &#123;(u, v)&#125;</span><br><span class="line">    <span class="keyword">return</span> A</span><br></pre></td></tr></table></figure></p><p><strong>定理：</strong> 设 G = (V, E) 是一个在边 E 上定义了实数值权重函数 w 的连通无向图。设集合 A 为 E 的一个子集，且 A 包括在图 G 的某棵最小生成树中，设 (S, V - S) 是图 G 中尊重集合 A 的任意一个切割（集合 A 中不存在横跨该切割的边），又设 (u, v) 是横跨切割 (S, V - S) 的一条轻边。那么边 (u, v) 对于集合 A 是安全的。</p><h2 id="Kruskal-算法"><a href="#Kruskal-算法" class="headerlink" title="Kruskal 算法"></a>Kruskal 算法</h2><p>在 Kurskal 算法中，集合 A 是一个森林，其结点就是给定图的结点。每次加入集合 A 中的安全边永远是权重最小的连接两个不同分量的边。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MST-KRUSKAL(G, w)</span><br><span class="line">    A = ∅</span><br><span class="line">    <span class="keyword">for</span> each vertex v in G.V</span><br><span class="line">        MAKE-SET(v)</span><br><span class="line">    sort the edge of G.E into nondecreasing order by weight w</span><br><span class="line">    <span class="keyword">for</span> each edge (u, v) in G.E, taken in nondecreasing order by weight</span><br><span class="line">        <span class="keyword">if</span> FIND-SET(u) ≠ FIND-SET(v)</span><br><span class="line">            A = A ∪ &#123;(u, v)&#125;</span><br><span class="line">            UNION(u, v)</span><br><span class="line">    <span class="keyword">return</span> A</span><br></pre></td></tr></table></figure></p><blockquote><p>Kruskal 算法的时间复杂度为 $O(ElgV)$。</p></blockquote><p><img src="/posts/ee040603/006.png" alt="Kruskal 算法"></p><h2 id="Prim-算法"><a href="#Prim-算法" class="headerlink" title="Prim 算法"></a>Prim 算法</h2><p>在 Prim 算法里，集合 A 则是一棵树。这棵树从一个任意的根结点 r 开始，一直长大到覆盖 V 中的所有结点时为止。每次加入到 A 中的安全边永远是连接 A 和 A 之外某个结点的边中权重最小的边。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">MST-PRIM(G, w, r)</span><br><span class="line">    <span class="keyword">for</span> each u in G.V</span><br><span class="line">        u.key = ∞</span><br><span class="line">        u.π = NIL</span><br><span class="line">    r.key = <span class="number">0</span></span><br><span class="line">    Q = G.V</span><br><span class="line">    <span class="keyword">while</span> Q ≠ ∅</span><br><span class="line">        u = EXTRACT-MIN(Q)</span><br><span class="line">        <span class="keyword">for</span> each v in G.Adj[u]</span><br><span class="line">            <span class="keyword">if</span> v in Q <span class="keyword">and</span> w(u, v) &lt; v.key</span><br><span class="line">                v.π = u</span><br><span class="line">                v.key = w(u, v)</span><br></pre></td></tr></table></figure></p><blockquote><p>如果使用二叉最小优先队列来实现最小优先队列 Q，时间复杂度为 $O(ElgV)$；<br>如果使用斐波那契堆来实现最小优先队列 Q，则 Prim 算法的运行时间将改进到 $O(E + VlgV)$</p></blockquote><p><img src="/posts/ee040603/007.png" alt="Prim算法"></p><h1 id="单源最短路径"><a href="#单源最短路径" class="headerlink" title="单源最短路径"></a>单源最短路径</h1><ol><li>最短路径的子路径也是最短路径</li><li>如果从结点 s 到结点 v 的某条路径上存在权重为负值的环路，我们定义 $\delta(s, v) = -\infty$</li><li>一般地，我们假定在找到的最短路径中没有环路，即它们都是简单路径。<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 初始化</span></span><br><span class="line"><span class="comment">  * v.d：s 到 v 的最短路径估计</span></span><br><span class="line"><span class="comment">  * v.π：前驱结点</span></span><br><span class="line"><span class="comment">  **/</span> </span><br><span class="line">INITIALIZE-SINGLE-SOURCE(G, s)</span><br><span class="line">    <span class="keyword">for</span> each vertex v in G.V</span><br><span class="line">        v.d = ∞</span><br><span class="line">        v.π = NIL</span><br><span class="line">    s.d = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// 松弛操作</span></span><br><span class="line">RELAX(u, v, w)</span><br><span class="line">    <span class="keyword">if</span> v.d &gt; u.d + w(u, v)</span><br><span class="line">        v.d = u.d + w(u, v)</span><br><span class="line">        v.π = u</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>Dijkstra 算法和用于有向无环图的最短路径算法对每条边仅松弛一次。 Bellman-Ford 算法则对每条边松弛 |V| - 1 次。</p></blockquote><h2 id="Bellman-Ford-算法"><a href="#Bellman-Ford-算法" class="headerlink" title="Bellman-Ford 算法"></a>Bellman-Ford 算法</h2><p>Bellman-Ford 算法解决的是一般情况下的最短路径问题。该算法返回 TRUE 值当且仅当输入图不包含可以从源结点到达的权重为负值的环路。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">BELLMAN-FORD(G, w, s)</span><br><span class="line">    INITIALIZE-SINGLE-SOURCE(G, s)</span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span> to |G.V|<span class="number">-1</span></span><br><span class="line">        <span class="keyword">for</span> each edge (u, v) in G.E</span><br><span class="line">            RELAX(u, v, w)</span><br><span class="line">    <span class="keyword">for</span> each edge (u, v) in G.E</span><br><span class="line">        <span class="keyword">if</span> v.d &gt; u.d + w(u, v)</span><br><span class="line">            <span class="keyword">return</span> FALSE</span><br><span class="line">    <span class="keyword">return</span> TRUE</span><br></pre></td></tr></table></figure></p><blockquote><p>Bellman-Ford 算法的总运行时间为 O(VE)<br><img src="/posts/ee040603/008.png" alt="Bellman-Ford 算法"></p></blockquote><h2 id="有向无环图中的单源最短路径问题"><a href="#有向无环图中的单源最短路径问题" class="headerlink" title="有向无环图中的单源最短路径问题"></a>有向无环图中的单源最短路径问题</h2><p>根据结点的拓扑排序次序来对带权重的有向无环图 G = (V, E) 进行边的松弛操作，我们便可以在 $O(V + E)$ 时间内计算出从单个源结点到所有结点之间的最短路径。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">DAG-SHOPTEST-PATHS(G, w, s)</span><br><span class="line">    topologically sort the vertice of G</span><br><span class="line">    INITIALIZE-SINGLE-SOURCE(G, s)</span><br><span class="line">    <span class="keyword">for</span> each vertex u, taken in topologically sorted order</span><br><span class="line">        <span class="keyword">for</span> each vertex v in G.Adj[u]</span><br><span class="line">            RELAX(u, v, w)</span><br></pre></td></tr></table></figure></p><p><img src="/posts/ee040603/009.png" alt="DAG"></p><h2 id="Dijkstra-算法"><a href="#Dijkstra-算法" class="headerlink" title="Dijkstra 算法"></a>Dijkstra 算法</h2><p>Dijkstra 算法解决的是带权重的有向图上的单源最短路径问题，该算法要求所有边的权重都为非负值。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DIJKSTRA(G, w, s)</span><br><span class="line">    INITIALIZE-SINGLE-SOURCE(G, s)</span><br><span class="line">    S = ∅</span><br><span class="line">    Q = G.V</span><br><span class="line">    <span class="keyword">while</span> Q ≠ ∅</span><br><span class="line">        u = EXTRACT-MIN(Q)</span><br><span class="line">        S = S ∪ &#123;u&#125;</span><br><span class="line">        <span class="keyword">for</span> each vertex v in G.Adj[u]</span><br><span class="line">            RELAX(u, v, w)</span><br></pre></td></tr></table></figure></p><blockquote><p>如果使用二叉最小优先队列来实现最小优先队列 Q，时间复杂度为 $O(ElgV)$；<br>如果使用斐波那契堆来实现最小优先队列 Q，则 Dijkstra 算法的运行时间将改进到 $O(E + VlgV)$</p></blockquote><p><img src="/posts/ee040603/010.png" alt="Dijsktra算法"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是图&quot;&gt;&lt;a href=&quot;#什么是图&quot; class=&quot;headerlink&quot; title=&quot;什么是图&quot;&gt;&lt;/a&gt;什么是图&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt; 一个图 $G = (V, E)$ 由顶点（或结点）的非空集 $V$ 和边的集合 $E
      
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://yz1509.github.io/categories/DataStructure-Algorithm/"/>
    
    
      <category term="图" scheme="https://yz1509.github.io/tags/%E5%9B%BE/"/>
    
      <category term="BFS" scheme="https://yz1509.github.io/tags/BFS/"/>
    
      <category term="DFS" scheme="https://yz1509.github.io/tags/DFS/"/>
    
      <category term="拓扑排序" scheme="https://yz1509.github.io/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    
      <category term="强连通分量" scheme="https://yz1509.github.io/tags/%E5%BC%BA%E8%BF%9E%E9%80%9A%E5%88%86%E9%87%8F/"/>
    
      <category term="最小生成树" scheme="https://yz1509.github.io/tags/%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
    
      <category term="Kruskal 算法" scheme="https://yz1509.github.io/tags/Kruskal-%E7%AE%97%E6%B3%95/"/>
    
      <category term="Prim 算法" scheme="https://yz1509.github.io/tags/Prim-%E7%AE%97%E6%B3%95/"/>
    
      <category term="单源最短路径" scheme="https://yz1509.github.io/tags/%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"/>
    
      <category term="Bellman-Ford 算法" scheme="https://yz1509.github.io/tags/Bellman-Ford-%E7%AE%97%E6%B3%95/"/>
    
      <category term="Dijkstra 算法" scheme="https://yz1509.github.io/tags/Dijkstra-%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>吐血bug合集（持续更新）</title>
    <link href="https://yz1509.github.io//posts/afec8fb8/"/>
    <id>https://yz1509.github.io//posts/afec8fb8/</id>
    <published>2018-07-25T12:23:21.000Z</published>
    <updated>2018-07-26T05:21:55.586Z</updated>
    
    <content type="html"><![CDATA[<ol><li>图片后缀名的大小写有区别，比如 ![avatar](sample.png) 本地可以正常加载 sample.PNG，但是静态网页加载失败 = =</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;图片后缀名的大小写有区别，比如 ![avatar](sample.png) 本地可以正常加载 sample.PNG，但是静态网页加载失败 = =&lt;/li&gt;
&lt;/ol&gt;

      
    
    </summary>
    
      <category term="其他" scheme="https://yz1509.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="bug" scheme="https://yz1509.github.io/tags/bug/"/>
    
      <category term="图片显示" scheme="https://yz1509.github.io/tags/%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/"/>
    
  </entry>
  
  <entry>
    <title>树</title>
    <link href="https://yz1509.github.io//posts/7b216a3b/"/>
    <id>https://yz1509.github.io//posts/7b216a3b/</id>
    <published>2018-07-25T07:06:19.000Z</published>
    <updated>2018-07-26T06:12:43.287Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是树"><a href="#什么是树" class="headerlink" title="什么是树"></a>什么是树</h1><p><strong>定义 1</strong> 树是没有简单回路的连通无向图。</p><p><strong>定义 2</strong> 有根树是指定一个顶点作为根并且每条边的方向都离开根的树。<br><img src="/posts/7b216a3b/tree001.png" alt="树"></p><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><ul><li>如果 $x.p = NIL$，则 $x$ 是根结点</li><li>属性 $T.root$ 指向整棵树 $T$ 的根结点，如果 $T.root = NIL$，则该数为空<br><img src="/posts/7b216a3b/tree002.png" alt="二叉树"></li></ul><h2 id="分支无限制的有根树"><a href="#分支无限制的有根树" class="headerlink" title="分支无限制的有根树"></a>分支无限制的有根树</h2><ul><li>$x.left-child$ 指向结点 $x$ 的最左边的孩子结点</li><li>$x.right-sibling$ 指向结点 $x$ 右侧相邻的兄弟结点<br><img src="/posts/7b216a3b/tree003.png" alt="分支无限制"></li></ul><h1 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h1><h2 id="什么是二叉搜索树"><a href="#什么是二叉搜索树" class="headerlink" title="什么是二叉搜索树"></a>什么是二叉搜索树</h2><p>二叉搜索树（binary-search-tree，BST）性质：设 $x$ 是二叉搜索树中的一个结点。如果 $y$ 是 $x$ 左子树中的一个结点，那么 $y.key \leq x.key$；如果 $y$ 是 $x$ 右子树中的一个结点，那么 $y.key \geq x.key$。</p><p>中序遍历：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INORDER-TREE-WALK(x)</span><br><span class="line">    <span class="keyword">if</span> x ≠ NIL</span><br><span class="line">        INOREDER-TREE-WALK(x.left)</span><br><span class="line">        print x.key</span><br><span class="line">        INOREDER-TREE-WALK(x.right)</span><br></pre></td></tr></table></figure></p><blockquote><p>中序遍历时间复杂度为 O(n)，使用替换法，通过证明 $T(n) \le (c+d)n + c$，可以证得 $T(n) = O(n)$</p></blockquote><h2 id="查询二叉搜索树"><a href="#查询二叉搜索树" class="headerlink" title="查询二叉搜索树"></a>查询二叉搜索树</h2><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><ul><li><p>递归版本</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">TREE-SEARCH(x, k)</span><br><span class="line">    <span class="keyword">if</span> x == NIL <span class="keyword">or</span> k == x.key</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">if</span> k &lt; x.key</span><br><span class="line">        <span class="keyword">return</span> TREE-SEARCH(x.left, k)</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> TREE-SEARCH(x.right, k)</span><br></pre></td></tr></table></figure></li><li><p>迭代版本（效率更高）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ITERATIVE-TREE-SEARCH(x, k)</span><br><span class="line">    <span class="keyword">while</span> x ≠ NIL <span class="keyword">and</span> k ≠ x.key</span><br><span class="line">        <span class="keyword">if</span> k &lt; x.key</span><br><span class="line">            x = x.left</span><br><span class="line">        <span class="keyword">else</span> x = x.right</span><br><span class="line">    <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure></li></ul><h3 id="最大（小）关键字元素"><a href="#最大（小）关键字元素" class="headerlink" title="最大（小）关键字元素"></a>最大（小）关键字元素</h3><ul><li><p>最小关键字</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TREE-MINIMUM(x)</span><br><span class="line">    <span class="keyword">while</span> x.left ≠ NIL</span><br><span class="line">        x = x.left</span><br><span class="line">    <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure></li><li><p>最大关键字</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TREE-MAXIMUM(x)</span><br><span class="line">    <span class="keyword">while</span> x.right ≠ NIL</span><br><span class="line">        x = .right</span><br><span class="line">    <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure></li></ul><h3 id="后继和前驱"><a href="#后继和前驱" class="headerlink" title="后继和前驱"></a>后继和前驱</h3><p>如果所有的关键字互不相同，则一个结点 $x$ 的后继是大于 $x.key$ 的最小关键字的结点。二叉搜索树的性质允许我们没有任何关键字的比较来确定一个结点的后继。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">TREE-SUCCESSOR(x)</span><br><span class="line">    <span class="keyword">if</span> x.right ≠ NIL</span><br><span class="line">        <span class="keyword">return</span> TREE-MINIMUM(x.right)</span><br><span class="line">    y = x.p</span><br><span class="line">    <span class="keyword">while</span> y ≠ NIL <span class="keyword">and</span> x == y.right</span><br><span class="line">        x = y</span><br><span class="line">        y = y.p</span><br><span class="line">    <span class="keyword">return</span> y</span><br></pre></td></tr></table></figure></p><blockquote><p>在一棵高度为 $h$ 的二叉搜索树上，动态集合上的操作 SEARCH、MINIMUM、MAXIMUM、SUCCESSOR、PREDECESSOR 可以在 $O(h)$ 时间内完成。</p></blockquote><h2 id="插入和删除"><a href="#插入和删除" class="headerlink" title="插入和删除"></a>插入和删除</h2><h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">TREE-INSERT(T, z)</span><br><span class="line">    y = NIL<span class="comment">// 保存 z 要插入的位置</span></span><br><span class="line">    x = T.root</span><br><span class="line">    <span class="keyword">while</span> x ≠ NIL</span><br><span class="line">        y = x</span><br><span class="line">        <span class="keyword">if</span> z.key &lt; x.key</span><br><span class="line">            x = x.left</span><br><span class="line">        <span class="keyword">else</span> x = x.right</span><br><span class="line">    z.p = y</span><br><span class="line">    <span class="keyword">if</span> y == NIL</span><br><span class="line">        T.root = z<span class="comment">// tree T was empty</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> z.key &lt; y.key</span><br><span class="line">        y.left = z</span><br><span class="line">    <span class="keyword">else</span> y.right = z</span><br></pre></td></tr></table></figure><p><img src="/posts/7b216a3b/tree004.png" alt="插入"></p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>从二叉搜索树 $T$ 中删除结点 $z$ 分为三种基本情况</p><ol><li>如果 $z$ 没有孩子结点，那么直接将它删除，并修改它的父结点，用 NIL 替换 $z$</li><li>如果 $z$ 只有一个孩子，那么将这个孩子提升到树中 $z$ 的位置上，并修改 $z$ 的父结点，用 $z$ 的孩子来替换 $z$</li><li>如果 $z$ 有两个孩子，那么找到 $z$ 的后继 $y$，用 $y$ 来占据树中 $z$ 的位置<br><img src="/posts/7b216a3b/tree005.png" alt="删除"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用一棵以 v 为根的子树来替换一棵以 u 为根的子树</span></span><br><span class="line">TRANSPLANT(T, u, v)</span><br><span class="line">    <span class="keyword">if</span> u.p == NIL</span><br><span class="line">        T.root = v</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> u == u.p.left</span><br><span class="line">        u.p.left = v</span><br><span class="line">    <span class="keyword">else</span> u.p.right = v</span><br><span class="line">    <span class="keyword">if</span> v ≠ NIL</span><br><span class="line">        v.p = u.p</span><br><span class="line">        </span><br><span class="line">TREE-DELETE(T, z)</span><br><span class="line">    <span class="keyword">if</span> z.left == NIL<span class="comment">// (a)</span></span><br><span class="line">        TRANSPLANT(T, z, z.right)</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> z.right == NIL<span class="comment">// (b)</span></span><br><span class="line">        TRANSPLANT(T, z, z.left)</span><br><span class="line">    <span class="keyword">else</span> y = TREE-MINIMUM(z.right)</span><br><span class="line">        <span class="keyword">if</span> y.p ≠ z<span class="comment">// (d)</span></span><br><span class="line">            TRANSPLANT(T, y, y.right)</span><br><span class="line">            y.right = z.right</span><br><span class="line">            y.right.p = y</span><br><span class="line">        TRANSPLANT(T, z, y)<span class="comment">// (c)</span></span><br><span class="line">        y.left = z.left</span><br><span class="line">        y.left.p = y</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>在一棵高度为 $h$ 的二叉搜索树上，实现动态集合的操作 INSERT 和 DELETE，可以在 $O(h)$ 时间内完成。<br>一棵有 $n$ 个不同关键字的随机构建二叉搜索树的期望高度为 $O(lg n)$</p></blockquote><h1 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h1><h2 id="红黑树的性质"><a href="#红黑树的性质" class="headerlink" title="红黑树的性质"></a>红黑树的性质</h2><p>一棵红黑树是满足下面红黑性质的二叉搜索树：</p><ol><li>每个结点或是红色的，或是黑色的</li><li>根结点是黑色的</li><li>每个叶子结点（NIL）也是黑色的</li><li>如果一个结点是红色的，则它的两个子结点都是黑色的</li><li>对每个结点，从该结点到其所有后代叶结点的简单路径上，均包含相同数目的黑色结点</li></ol><p>从某个结点 $x$ 出发（不含该结点）到达一个叶结点的任意一条简单路径上的黑色结点个数称为该结点的 black-height，记为 bh(x)。<br><img src="/posts/7b216a3b/tree006.png" alt="红黑树"></p><blockquote><p>一棵有 $n$ 个内部结点的红黑树的高度至多为 $2lg(n+1)$。</p></blockquote><h2 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h2><p>旋转是一种能保持二叉搜索树性质的局部操作。分为两种旋转：左旋和右旋。<br><img src="/posts/7b216a3b/tree007.png" alt="旋转"><br>在 LEFT-ROTATION 的伪代码中，假设 $x.right \ne T.nil$ 且根结点的父结点为 $T.nil$。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">LEFT-ROTATION(T, x)</span><br><span class="line">    y = x.right<span class="comment">// set y</span></span><br><span class="line">    x.right = y = left<span class="comment">// turn y's left subtree into x's right subtree</span></span><br><span class="line">    <span class="keyword">if</span> y.left ≠ T.nil</span><br><span class="line">        y.left.p = x</span><br><span class="line">    y.p = x.p<span class="comment">// link x's parent to y</span></span><br><span class="line">    <span class="keyword">if</span> x.p == T.nil</span><br><span class="line">        T.root = y</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> x == x.p.left</span><br><span class="line">        x.p.left =y</span><br><span class="line">    <span class="keyword">else</span> x.p.right = y</span><br><span class="line">    y.left = x<span class="comment">// put x on y's left</span></span><br><span class="line">    x.p = y</span><br></pre></td></tr></table></figure></p><p>RIGHT-ROTATION 操作的伪代码是对称的。在旋转操作中只有指针改变，其他属性都保持不变。下图给出了一个 LEFT-ROTATION 操作修改二叉搜索树的例子。<br><img src="/posts/7b216a3b/tree008.png" alt="左旋例子"></p><h2 id="插入-1"><a href="#插入-1" class="headerlink" title="插入"></a>插入</h2><p>有三种情况：</p><ol><li>$z$ 的叔结点 $y$ 是红色的<br><img src="/posts/7b216a3b/tree009.png" alt="红黑树插入case1"></li><li>$z$ 的叔结点 $y$ 是黑色的且 $z$ 是一个右孩子</li><li>$z$ 的叔结点 $y$ 是黑色的且 $z$ 是一个左孩子<br><img src="/posts/7b216a3b/tree010_v2.png" alt="case2&amp;3"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 z 插入树 T 中，然后将 z 着为红色</span></span><br><span class="line">RB-INSERT(T, z)</span><br><span class="line">    y = T.nil</span><br><span class="line">    x = T.root</span><br><span class="line">    whil x ≠ T.nil</span><br><span class="line">        y = x</span><br><span class="line">        <span class="keyword">if</span> z.key &lt; x.key</span><br><span class="line">            x = x.left</span><br><span class="line">        <span class="keyword">else</span> x = x.right</span><br><span class="line">    z.p = y</span><br><span class="line">    <span class="keyword">if</span> y == T.nil</span><br><span class="line">        T.root = z</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> z.key &lt; y.key</span><br><span class="line">        y.left = z</span><br><span class="line">    <span class="keyword">else</span> y.right = z</span><br><span class="line">    z.left = T.nil</span><br><span class="line">    z.right = T.nil</span><br><span class="line">    z.color = RED</span><br><span class="line">    RB-INSERT-FIXUP(T, z)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入 z 后，对树进行调整来保持红黑性质</span></span><br><span class="line">RB-INSERT-FIXUP(T, z)</span><br><span class="line">    <span class="keyword">while</span> z.p.color == RED</span><br><span class="line">        <span class="keyword">if</span> z.p == z.p.p.left</span><br><span class="line">            y = z.p.p.right</span><br><span class="line">            <span class="keyword">if</span> y.color == RED</span><br><span class="line">                z.p.color = BLACK<span class="comment">// case 1</span></span><br><span class="line">                y.color = BLACK <span class="comment">// case 1</span></span><br><span class="line">                z.p.p.color = RED<span class="comment">// case 1</span></span><br><span class="line">                z = z.p.p<span class="comment">// case 1</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> z == z.p.right</span><br><span class="line">                z = z.p<span class="comment">// case 2</span></span><br><span class="line">                LEFT-ROTATION(T, z)<span class="comment">// case 2</span></span><br><span class="line">            z.p.color = BLACK<span class="comment">// case 3</span></span><br><span class="line">            z.p.p.color = RED<span class="comment">// case 3</span></span><br><span class="line">            RIGHT-ROTATION(T, z.p.p)<span class="comment">// case 3</span></span><br><span class="line">        <span class="keyword">else</span>(same as then clause</span><br><span class="line">                with <span class="string">"right"</span> <span class="keyword">and</span> <span class="string">"left"</span> exchanged)</span><br><span class="line">    T.root.color = BLACK</span><br></pre></td></tr></table></figure></li></ol><p><img src="/posts/7b216a3b/tree011.png" alt="红黑树插入"></p><h2 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h2><p>有四种情况：</p><ol><li>$x$ 的兄弟结点 $w$ 是红色的</li><li>$x$ 的兄弟结点 $w$ 是黑色的，而且 $w$ 的两个子结点都是黑色的</li><li>$x$ 的兄弟结点 $w$ 是黑色的， $w$ 的左孩子是红色的，右孩子是黑色的</li><li>$x$ 的兄弟结点 $w$ 是黑色的，且 $w$ 的右孩子是红色的<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用一棵以 v 为根的子树来替换一棵以 u 为根的子树</span></span><br><span class="line">RB-TRANSPLANT(T, u, v)</span><br><span class="line">    <span class="keyword">if</span> u.p == T.nil</span><br><span class="line">        T.root = v</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> u == u.p.left</span><br><span class="line">        u.p.left = v</span><br><span class="line">    <span class="keyword">else</span> u.p.right = v</span><br><span class="line">v.p = u.p</span><br><span class="line"></span><br><span class="line"><span class="comment">// 过程和 TREE-DELETE 类似</span></span><br><span class="line">RB-DELETE(T, z)</span><br><span class="line">    y = z</span><br><span class="line">    y-original-color = y.color</span><br><span class="line">    <span class="keyword">if</span> z.left == T.nil</span><br><span class="line">        x = z.right</span><br><span class="line">        RB-TRANSPLANT(T, z, z.right)</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> z.right == T.nil</span><br><span class="line">        x = z.left</span><br><span class="line">        RB-TRANSPLANT(T, z, z.left)</span><br><span class="line">    <span class="keyword">else</span> y = TREE-MINIMUM(z.right)</span><br><span class="line">        y-orginal-color = y.color</span><br><span class="line">        x = y.right</span><br><span class="line">        <span class="keyword">if</span> y.p == z</span><br><span class="line">            x.p = y</span><br><span class="line">        <span class="keyword">else</span> RB-TRANSPLANT(T, y, y.right)</span><br><span class="line">            y.right = z.right</span><br><span class="line">            y.right.p = y</span><br><span class="line">        RB-TRANSPLANT(T, z, y)</span><br><span class="line">        y.left = z.left</span><br><span class="line">        y.left.p = y</span><br><span class="line">        y.color = z.color</span><br><span class="line">    <span class="keyword">if</span> y-orginal-color == BLACK</span><br><span class="line">        RB-DELETE-FIXUP(T, x)</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 通过改变颜色和执行旋转来恢复红黑性质</span></span><br><span class="line">RB-DELETE-FIXUP(T, x)</span><br><span class="line">    <span class="keyword">while</span> x ≠ T.root <span class="keyword">and</span> x.color == BLACK</span><br><span class="line">        <span class="keyword">if</span> x == x.p.left</span><br><span class="line">            w = x.p.right</span><br><span class="line">            <span class="keyword">if</span> w.color == RED</span><br><span class="line">                w.color = BLACK<span class="comment">// case 1</span></span><br><span class="line">                x.p.color = RED<span class="comment">// case 1</span></span><br><span class="line">                LEFT-ROTATION(T, x.p)<span class="comment">// case 1</span></span><br><span class="line">                w = x.p.right<span class="comment">// case 1</span></span><br><span class="line">            <span class="keyword">if</span> w.left.color == BLACK <span class="keyword">and</span> w.right.color == BLACK</span><br><span class="line">                w.color = RED<span class="comment">// case 2</span></span><br><span class="line">                x = x.p<span class="comment">// case 2</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> w.right.color == BLACK</span><br><span class="line">                w.left.color = BLACK<span class="comment">// case 3</span></span><br><span class="line">                w.color = RED<span class="comment">// case 3</span></span><br><span class="line">                RIGHT-ROTATION(T, w)<span class="comment">// case 3</span></span><br><span class="line">                w = x.p.right<span class="comment">// case 3</span></span><br><span class="line">            w.color = x.p.color<span class="comment">// case 4</span></span><br><span class="line">            x.p.color = BLACK<span class="comment">// case 4</span></span><br><span class="line">            w.right.color = BLACK<span class="comment">// case 4</span></span><br><span class="line">            LEFT-ROTATION(T, x.p)<span class="comment">// case 4</span></span><br><span class="line">            x = T.root<span class="comment">// case 4</span></span><br><span class="line">        <span class="keyword">else</span> (same as then clause wiht</span><br><span class="line">                <span class="string">"right"</span> <span class="keyword">and</span> <span class="string">"left"</span> exchanged)</span><br><span class="line">    x.color = BLACK</span><br></pre></td></tr></table></figure></li></ol><p><img src="/posts/7b216a3b/tree012.png" alt="四种情况"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是树&quot;&gt;&lt;a href=&quot;#什么是树&quot; class=&quot;headerlink&quot; title=&quot;什么是树&quot;&gt;&lt;/a&gt;什么是树&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;定义 1&lt;/strong&gt; 树是没有简单回路的连通无向图。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定义 2&lt;/str
      
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://yz1509.github.io/categories/DataStructure-Algorithm/"/>
    
    
      <category term="二叉搜索树" scheme="https://yz1509.github.io/tags/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    
      <category term="红黑树" scheme="https://yz1509.github.io/tags/%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode 204. Count Primes</title>
    <link href="https://yz1509.github.io//posts/9235f089/"/>
    <id>https://yz1509.github.io//posts/9235f089/</id>
    <published>2018-07-20T09:52:43.000Z</published>
    <updated>2018-07-20T10:06:55.037Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><p><a href="https://leetcode.com/problems/count-primes/description/" target="_blank" rel="noopener">题目链接</a><br>Count the number of prime numbers less than a non-negative number  n.</p><p><strong>Example:</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: <span class="number">10</span></span><br><span class="line">Output: <span class="number">4</span></span><br><span class="line">Explanation: There are <span class="number">4</span> prime numbers less than <span class="number">10</span>, they are <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7.</span></span><br></pre></td></tr></table></figure></p><h1 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h1><p>使用埃拉托斯特尼筛选法，获取素数序列，从而得到小于 n 的素数个数。</p><blockquote><p>埃拉托斯特尼筛选法：埃拉托斯特尼筛法，简称埃氏筛或爱氏筛，是一种由希腊数学家埃拉托斯特尼所提出的一种简单检定素数的算法。要得到自然数 n 以内的全部素数，必须把不大于 $\sqrt{n}$ 的所有素数的倍数剔除，剩下的就是素数。</p></blockquote><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countPrimes</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; NotPrime(n, <span class="literal">false</span>);<span class="comment">// bool变量初始为false较好</span></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> upper = <span class="built_in">sqrt</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; n; i += <span class="number">2</span>)&#123;<span class="comment">// 剔除素数 2 的倍数</span></span><br><span class="line">        <span class="keyword">if</span> (!NotPrime[i])&#123;</span><br><span class="line">            ++sum;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; upper)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i*i; j &lt; n; j += i)&#123; <span class="comment">// 剔除素数 i 的倍数</span></span><br><span class="line">            NotPrime[j] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="拓展-—-素数判断"><a href="#拓展-—-素数判断" class="headerlink" title="拓展 — 素数判断"></a>拓展 — 素数判断</h1><p>质数（Prime number），又称素数，为只有 1 个自身两个因数的数。下面介绍两种判断素数的方法。</p><ol><li><p>直观判断法<br>根据定义判断从 2 到 $\sqrt{n}$ 是否存在 n 的约数即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime_1</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num &lt;= <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> upper = <span class="built_in">sqrt</span>(num);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= upper; ++i)&#123;</span><br><span class="line">        <span class="keyword">if</span> (num % i == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>应用素数分布规律<br>素数分布规律：大于等于 5 的素数一定和 6 的倍数相邻。例如 5 和 7，11 和 13,17 和 19 等等；<br>证明：令 $x ≥ 1$，将大于等于 5 的自然数表示如下：</p></li></ol><p>$··· 6x-1，6x，6x+1，6x+2，6x+3，6x+4，6x+5，6(x+1），6(x+1)+1 ···$</p><p>可以看到，不在 6 的倍数两侧，即 $6x$ 两侧的数为 $6x+2$，$6x+3$，$6x+4$，可以表示为$2(3x+1)$，$3(2x+1)$，$2(3x+2)$，所以它们一定不是素数，显然，素数要出现只可能出现在 6x 的相邻两侧。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isPrime_2</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num &lt; <span class="number">5</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (num == <span class="number">2</span> || num == <span class="number">3</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 不在 6 的倍数两侧的一定不是素数</span></span><br><span class="line">    <span class="keyword">if</span> ((num % <span class="number">6</span> != <span class="number">1</span>) &amp;&amp; (num % <span class="number">6</span> != <span class="number">5</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 在 6 的倍数两侧的也不一定是素数，需判断</span></span><br><span class="line">    <span class="keyword">int</span> upper = <span class="built_in">sqrt</span>(num);</span><br><span class="line">    <span class="comment">/* num 为 6x-1 或 6x+1</span></span><br><span class="line"><span class="comment">     * num 为奇数，不能被 6x，6x+2，6x+4 整除</span></span><br><span class="line"><span class="comment">     * num 不可能被 3 整除，故不可能被 6x+3 整除</span></span><br><span class="line"><span class="comment">     * 因此，num 只可能被 6x-1 和 6x+1 形式的数整除</span></span><br><span class="line"><span class="comment">     */</span>    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">5</span>; i &lt;= upper; i += <span class="number">6</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> ((num % i == <span class="number">0</span>) || (num % (i+<span class="number">2</span>) == <span class="number">0</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>扩展阅读：<strong>孪生素数</strong>就是指相差 2 的素数对，例如 3 和 5，5 和 7，11 和 13…。孪生素数猜想正式由希尔伯特在 1900 年国际数学家大会的报告上第 8 个问题中提出，可以这样描述：存在无穷多个素数 $p$，使得 $p + 2$ 是素数。素数对 $(p, p + 2)$ 称为孪生素数。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;/a&gt;Description&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/prob
      
    
    </summary>
    
      <category term="刷题" scheme="https://yz1509.github.io/categories/%E5%88%B7%E9%A2%98/"/>
    
    
      <category term="LeetCode" scheme="https://yz1509.github.io/tags/LeetCode/"/>
    
      <category term="素数" scheme="https://yz1509.github.io/tags/%E7%B4%A0%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>排序算法</title>
    <link href="https://yz1509.github.io//posts/735e5788/"/>
    <id>https://yz1509.github.io//posts/735e5788/</id>
    <published>2018-07-19T02:07:14.000Z</published>
    <updated>2018-07-25T10:50:32.684Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>排序算法可以分为内部排序和外部排序，内部排序是数据记录在内存中进行排序，而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程中需要访问外存。</p><p>常见的八大排序算法，他们之间关系如下：<br><img src="/posts/735e5788/sort001.png" alt="avatar"></p><p>它们的性能比较：<br><img src="/posts/735e5788/sort002.png" alt="avatar"></p><p>下面，利用Python分别将他们进行实现。</p><h1 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h1><h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><p><img src="/posts/735e5788/sort006.gif" alt="插入排序示意图"><br>直接插入排序是一种最简单直观的排序算法，它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p><h2 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h2><ol><li>将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</li><li>从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。）</li></ol><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -------------- 直接插入排序 ------------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span><span class="params">(L)</span>:</span></span><br><span class="line">    <span class="comment"># 遍历数组中的所有元素，其中 0 号元素默认已排序，因此从 1 开始</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, len(L)):</span><br><span class="line">        <span class="comment"># 将该元素与已排序好的前序数组依次比较，如果该元素小，则交换</span></span><br><span class="line">        <span class="comment"># range(x-1, -1, -1): 从 x-1 倒序循环到 0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(x<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="comment"># 判断：如果符合条件则交换</span></span><br><span class="line">            <span class="keyword">if</span> L[i] &gt; L[i+<span class="number">1</span>]:</span><br><span class="line">                L[i], L[i+<span class="number">1</span>] = L[i+<span class="number">1</span>], L[i]</span><br></pre></td></tr></table></figure><h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><h2 id="算法思想-1"><a href="#算法思想-1" class="headerlink" title="算法思想"></a>算法思想</h2><p>希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。但希尔排序是非稳定排序算法。希尔排序是基于直接插入排序的以下两点性质而提出改进方法的：</p><ul><li>直接插入排序在对几乎已经排好序的数据操作时，效率高，可以达到线性排序的效率</li><li>但直接插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位</li></ul><p>希尔排序的基本思想是：先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，待整个序列中的记录“基本有序”时，再对全体记录进行依次直接插入排序。</p><h2 id="算法步骤-1"><a href="#算法步骤-1" class="headerlink" title="算法步骤"></a>算法步骤</h2><ol><li>选择一个增量序列 $t_1，t_2，… ，t_k$，其中 $t_i &gt; t_{i+1}，t_k = 1$；</li><li>按增量序列个数 $k$，对序列进行 $k$ 趟排序；</li><li>每趟排序，根据对应的增量 $t_i$，将待排序列分割成若干长度为 $m$ 的子序列，分别对各子表进行直接插入排序。仅增量因子为 1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。<br><img src="/posts/735e5788/sort003.png" alt="avatar"></li></ol><h2 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -------------- 希尔排序 ---------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_shell</span><span class="params">(L)</span>:</span></span><br><span class="line">    <span class="comment"># 初始化gap值，此处利用序列长度的一半为其赋值</span></span><br><span class="line">    gap = (int)(len(L)/<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 第一层循环：依次改变gap值对列表进行分组</span></span><br><span class="line">    <span class="keyword">while</span> (gap &gt;= <span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 下面，利用直接插入排序的思想对分组数据进行排序</span></span><br><span class="line">        <span class="comment"># range(gap, len(L)): 从gap开始</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(gap, len(L)):</span><br><span class="line">            <span class="comment"># range(x-gap, -1, -gap)：从x-gap开始与选定元素开始倒序比较，每个比较元素之间间隔gap</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(x-gap, <span class="number">-1</span>, -gap):</span><br><span class="line">                <span class="comment"># 如果该组当中两个元素满足交换条件，则进行交换</span></span><br><span class="line">                <span class="keyword">if</span> L[i] &gt; L[i+gap]:</span><br><span class="line">                    L[i], L[i+gap] = L[i+gap], L[i]</span><br><span class="line">        <span class="comment"># gap折半</span></span><br><span class="line">        gap = (int)(gap/<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h1 id="简单选择排序"><a href="#简单选择排序" class="headerlink" title="简单选择排序"></a>简单选择排序</h1><h2 id="算法思想-2"><a href="#算法思想-2" class="headerlink" title="算法思想"></a>算法思想</h2><p>简单选择排序的基本思想：比较 + 交换。</p><h2 id="算法步骤-2"><a href="#算法步骤-2" class="headerlink" title="算法步骤"></a>算法步骤</h2><ol><li>从待排序序列中，找到关键字最小的元素，存放在待排序序列的起始位置；</li><li>如果最小元素不是待排序序列的第一个元素，将其和第一个元素互换；</li><li>从余下的 N - 1 个元素中，找出关键字最小的元素，重复 1、2 步，直到排序结束。</li></ol><h2 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -------------- 简单选择排序 ----------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_sort</span><span class="params">(L)</span>:</span></span><br><span class="line">    <span class="comment"># 依次遍历序列中的每一个元素</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, len(L)):</span><br><span class="line">        <span class="comment"># 将当前位置的元素定义为比伦循环当中的最小值</span></span><br><span class="line">        minmum = L[x]</span><br><span class="line">        <span class="comment"># 将该元素与剩下的元素依次比较寻找最小元素</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(x+<span class="number">1</span>, len(L)):</span><br><span class="line">            <span class="keyword">if</span> L[i] &lt; minmum:</span><br><span class="line">                L[i], minmum = minmum, L[i]</span><br><span class="line">        L[x] = minmum</span><br></pre></td></tr></table></figure><h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><h2 id="堆的概念"><a href="#堆的概念" class="headerlink" title="堆的概念"></a>堆的概念</h2><p>堆：本质是一种数组对象。特别重要的一点性质：任意的叶子节点小于（或大于）它所有的父节点。对此，又分为大顶堆和小顶堆，大顶堆要求节点的元素都要大于其孩子，小顶堆要求节点元素都小于其左右孩子，两者对左右孩子的大小关系不做任何要求。<br>利用堆排序，就是基于大顶堆或者小顶堆的一种排序方法。下面，我们通过大顶堆来实现。</p><h2 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h2><p>堆排序可以按照以下步骤来完成：</p><ol><li>首先将序列构建称为大顶堆；（这样，位于根节点的元素一定是当前序列的最大值）<br><img src="/posts/735e5788/sort004.png" alt="avatar"></li><li>取出当前大顶堆的根节点，将其与序列末尾元素进行交换；（此时：序列末尾的元素为已排序的最大值；由于交换了元素，当前位于根节点的堆并不一定满足大顶堆的性质）</li><li>对交换后的前 n-1 个序列元素进行调整，使其满足大顶堆的性质；<br><img src="/posts/735e5788/sort005.png" alt="avatar"></li><li>重复 2、3步骤，直至堆中只有 1 个元素为止</li></ol><h2 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#--------------------- 堆排序 ----------------------</span></span><br><span class="line"><span class="comment">#************* 获取左右叶子结点 ***************</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">LEFT</span><span class="params">(i)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>*i + <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">RIGHT</span><span class="params">(i)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>*i + <span class="number">2</span></span><br><span class="line"><span class="comment">#************ 调整大顶堆 ***************</span></span><br><span class="line"><span class="comment"># L：待调整序列</span></span><br><span class="line"><span class="comment"># length：序列长度</span></span><br><span class="line"><span class="comment"># i: 需要调整的结点</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">adjust_max_heap</span><span class="params">(L, length, i)</span>:</span></span><br><span class="line">    <span class="comment"># 定义一个int值保存当前序列最大值的下标</span></span><br><span class="line">    largest = i</span><br><span class="line">    <span class="comment"># 执行循环: 1.寻找最大值的下标； </span></span><br><span class="line">    <span class="comment">#           2.最大值与父节点交换</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 获得序列左右叶子结点的下标</span></span><br><span class="line">        left, right = LEFT(i),RIGHT(i)</span><br><span class="line">        <span class="comment"># 当左叶子节点的下标小于序列长度并且左叶子节点的值大于父节点时，将左叶子节点的下标赋值给largest</span></span><br><span class="line">        <span class="keyword">if</span> (left &lt; length) <span class="keyword">and</span> (L[left] &gt; L[i]):</span><br><span class="line">            largest = left</span><br><span class="line">            print(<span class="string">'左叶子节点'</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            largest = i</span><br><span class="line">        <span class="comment"># 当右叶子节点的下标小于序列长度并且右叶子节点的值大于父节点时，将右叶子节点的下标赋值给largest</span></span><br><span class="line">        <span class="keyword">if</span> (right &lt; length) <span class="keyword">and</span> (L[right] &gt; L[largest]):</span><br><span class="line">            largest = right</span><br><span class="line">            print(<span class="string">'右边子节点'</span>)</span><br><span class="line">        <span class="comment"># 如果 largest 不等于 i，说明当前的父节点不是最大值，需要交换值</span></span><br><span class="line">        <span class="keyword">if</span> (largest != i):</span><br><span class="line">            L[i], L[largest] = L[largest], L[i]</span><br><span class="line">            i = largest</span><br><span class="line">            print(largest)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="comment">#************* 建立大顶堆 *************</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_max_heap</span><span class="params">(L)</span>:</span></span><br><span class="line">    length = len(L)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range((int)((length<span class="number">-1</span>)/<span class="number">2</span>), <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        adjust_max_heap(L, length, x)</span><br><span class="line"><span class="comment">#************* 堆排序 *************</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heap_sort</span><span class="params">(L)</span>:</span></span><br><span class="line">    <span class="comment"># 先建立大顶堆，保证最大值位于根节点，并且父节点的值大于叶子节点</span></span><br><span class="line">    build_max_heap(L)</span><br><span class="line">    <span class="comment"># i：当前堆中序列的长度，初始化为序列的长度</span></span><br><span class="line">    print(L)</span><br><span class="line">    i = len(L)</span><br><span class="line">    <span class="comment"># 执行循环：1.每次取出堆顶元素置于序列的最后(len-1, len-2, len-3...)</span></span><br><span class="line">    <span class="comment">#           2.调整堆，使其继续满足大顶堆的性质，注意实时修改堆中序列的长度</span></span><br><span class="line">    <span class="keyword">while</span>(i &gt; <span class="number">0</span>):</span><br><span class="line">        L[i<span class="number">-1</span>], L[<span class="number">0</span>] = L[<span class="number">0</span>], L[i<span class="number">-1</span>]</span><br><span class="line">        <span class="comment"># 堆中序列长度减 1</span></span><br><span class="line">        i = i - <span class="number">1</span>   <span class="comment"># Python没有自加自减运算符！</span></span><br><span class="line">        <span class="comment"># 调整大顶堆</span></span><br><span class="line">        adjust_max_heap(L, i, <span class="number">0</span>)</span><br></pre></td></tr></table></figure><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><h2 id="基本思想-1"><a href="#基本思想-1" class="headerlink" title="基本思想"></a>基本思想</h2><p>冒泡排序（Bubble Sort）也是一种简单直观的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p><h2 id="算法步骤-3"><a href="#算法步骤-3" class="headerlink" title="算法步骤"></a>算法步骤</h2><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol><h2 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#---------------- 冒泡排序 -------------------</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span><span class="params">(L)</span>:</span></span><br><span class="line">    length = len(L)</span><br><span class="line">    <span class="comment"># 序列长度为 length 时，需要执行 length-1 轮交换</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, length):</span><br><span class="line">    <span class="comment"># 对于每一轮交换，都将序列当中的左右元素进行比较</span></span><br><span class="line">    <span class="comment"># 每轮交换中，由于序列最后的元素一定是最大的，因此每轮循环到序列未排序的位置即可</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, length - x):</span><br><span class="line">            <span class="keyword">if</span> L[i] &gt; L[i+<span class="number">1</span>]:</span><br><span class="line">                L[i], L[i+<span class="number">1</span>] = L[i+<span class="number">1</span>], L[i]</span><br></pre></td></tr></table></figure><h1 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h1><h2 id="算法思想-3"><a href="#算法思想-3" class="headerlink" title="算法思想"></a>算法思想</h2><p>快速排序的基本思想：</p><ol><li>从序列当中选择一个基准数(pivot)，在这里我们选择序列当中第一个数最为基准数</li><li>将序列当中的所有数依次遍历，比基准数大的位于其右侧，比基准数小的位于其左侧</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序，重复步骤 1、2，直到所有子集当中只有一个元素为止。</li></ol><h2 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#--------------- 快速排序 -------------------</span></span><br><span class="line"><span class="comment"># L: 待排序的序列</span></span><br><span class="line"><span class="comment"># start：序列起始 index</span></span><br><span class="line"><span class="comment"># end：序列末尾 index</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span><span class="params">(L, start, end)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> start &lt; end:</span><br><span class="line">        i, j, pivot = start, end, L[start]</span><br><span class="line">        <span class="keyword">while</span> (i &lt; j):</span><br><span class="line">            <span class="comment"># 从右向左找第一个小于pivot的值</span></span><br><span class="line">            <span class="keyword">while</span> (i &lt; j) <span class="keyword">and</span> (L[j] &gt;= pivot):</span><br><span class="line">                j = j - <span class="number">1</span></span><br><span class="line">            <span class="comment"># 将小于pivot的值移到左边</span></span><br><span class="line">            <span class="keyword">if</span>(i &lt; j):</span><br><span class="line">                L[i] = L[j]</span><br><span class="line">                i = i + <span class="number">1</span></span><br><span class="line">            <span class="comment"># 从左到右找第一个大于pivot的值</span></span><br><span class="line">            <span class="keyword">while</span> (i &lt; j) <span class="keyword">and</span> (L[i] &lt; pivot):</span><br><span class="line">                i = i + <span class="number">1</span></span><br><span class="line">            <span class="comment"># 将大于pivot的值移到右边</span></span><br><span class="line">            <span class="keyword">if</span> (i &lt; j):</span><br><span class="line">                L[j] = L[i]</span><br><span class="line">                j = j - <span class="number">1</span></span><br><span class="line">        <span class="comment"># 循环结束后，说明 i=j，此时左边的值全都小于pivot,右边的值全都大于pivot</span></span><br><span class="line">        <span class="comment"># pivot的位置移动正确，那么此时只需对左右两侧的序列调用此函数进一步排序即可</span></span><br><span class="line">        <span class="comment"># 递归调用函数：依次对左侧序列：从 start 到 i-1</span></span><br><span class="line">        <span class="comment">#                     右侧序列：从 i+1 到 end</span></span><br><span class="line">        L[i] = pivot</span><br><span class="line">        <span class="comment"># 左侧序列继续排序</span></span><br><span class="line">        quick_sort(L, start, i<span class="number">-1</span>)</span><br><span class="line">        <span class="comment"># 右侧序列继续排序</span></span><br><span class="line">        quick_sort(L, i+<span class="number">1</span>, end)</span><br></pre></td></tr></table></figure><h1 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h1><h2 id="算法思想-4"><a href="#算法思想-4" class="headerlink" title="算法思想"></a>算法思想</h2><p>归并排序是建立在归并操作上的一种有效的排序算法，该算法是采用<strong>分治法</strong>的一个典型的应用。它的基本操作是：将已有的有序子序列合并，达到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。</p><p>归并排序其实要做两件事：</p><ul><li>分解—-将序列每次折半拆分</li><li>合并—-将划分后的序列段两两排序合并<br>因此，归并排序实际上就是两个操作，拆分+合并</li></ul><p><strong>如何分解？</strong><br>在这里，我们采用递归的方法，首先将待排序列分成 A,B 两组；然后重复对 A、B 序列分组；直到分组后组内只有一个元素，此时我们认为组内所有元素有序，则分组结束。</p><p><strong>如何合并？</strong><br>$L[first…mid]$ 为第一段，$L[mid+1…last]$ 为第二段，并且两端已经有序，现在我们要将两端合成达到 $[first…last]$ 并且也有序。</p><ol><li>首先依次从第一段与第二段中取出元素比较，将较小的元素赋值给 $temp[]$</li><li>重复执行上一步，当某一段赋值结束，则将另一段剩下的元素赋值给 $temp[]$</li><li>此时将 $temp[]$ 中的元素复制给 $L[]$，则得到的 $L[first…last]$ 有序</li></ol><h2 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#---------------- 归并排序 -------------------</span></span><br><span class="line"><span class="comment">#*********** 合并函数 **************</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mergearray</span><span class="params">(L, first, mid, last, temp)</span>:</span></span><br><span class="line">    i, j, k = first, mid+<span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="comment"># 当左右两边都有数时进行比较，取较小的数</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) <span class="keyword">and</span> (j &lt;= last):</span><br><span class="line">        <span class="keyword">if</span> L[i] &lt;= L[j]:</span><br><span class="line">            temp[k] = L[i]</span><br><span class="line">            i = i + <span class="number">1</span></span><br><span class="line">            k = k + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            temp[k] = L[j]</span><br><span class="line">            j = j + <span class="number">1</span></span><br><span class="line">            k = k + <span class="number">1</span></span><br><span class="line">    <span class="comment"># 如果左边序列还有数</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt;= mid):</span><br><span class="line">        temp[k] = L[i]</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">        k = k + <span class="number">1</span></span><br><span class="line">    <span class="comment"># 如果右边序列还有数</span></span><br><span class="line">    <span class="keyword">while</span>(j &lt;= last):</span><br><span class="line">        temp[k] = L[j]</span><br><span class="line">        j = j + <span class="number">1</span></span><br><span class="line">        k = k + <span class="number">1</span></span><br><span class="line">    <span class="comment"># 将temp当中该段有序元素赋值给 L 待排序序列使之部分有序</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, k):</span><br><span class="line">        L[first + x] = temp[x]</span><br><span class="line">        </span><br><span class="line"><span class="comment">#************ 分组函数 *************</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span><span class="params">(L, first, last, temp)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> first &lt; last:</span><br><span class="line">        mid = (int)(first + (last - first)/<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># 使左边序列有序</span></span><br><span class="line">        merge_sort(L, first, mid, temp)</span><br><span class="line">        <span class="comment"># 使右边序列有序</span></span><br><span class="line">        merge_sort(L, mid+<span class="number">1</span>, last, temp)</span><br><span class="line">        <span class="comment"># 将两个有序序列合并</span></span><br><span class="line">        mergearray(L, first, mid, last, temp)</span><br><span class="line">        </span><br><span class="line"><span class="comment">#************ 归并排序 **************</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort_array</span><span class="params">(L)</span>:</span></span><br><span class="line">    <span class="comment"># 声明一个长度为len(L)的空列表</span></span><br><span class="line">    temp = len(L)*[<span class="keyword">None</span>]</span><br><span class="line">    merge_sort(L, <span class="number">0</span>, len(L)<span class="number">-1</span>, temp)</span><br></pre></td></tr></table></figure><h1 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h1><h2 id="算法思想-5"><a href="#算法思想-5" class="headerlink" title="算法思想"></a>算法思想</h2><p>基数排序是一种非比较型整数排序算法，其原理是将整数按位数切割成不同的数字，然后按每个位数分别比较。由于整数也可以表达字符串（比如名字或日期）和特定格式的浮点数，所以基数排序也不是只能使用于整数。  </p><p>通过序列中各个元素的值，对排序的 N 个元素进行若干趟的“分配”与“收集”来实现排序。</p><ul><li>分配：我们将 $L[i]$ 中的元素取出，首先确定其个位上的数字，根据该数字分配到与之序号相同的桶中</li><li>收集：当序列中所有的元素都分配到对应的桶中，再按照顺序依次将桶中的元素收集形成新的一个待排序列 $L[]$</li><li>对新形成的序列 $L[]$ 重复执行分配和收集元素中的十位、百位…直到分配完该序列中的最高位，则排序结束</li></ul><h2 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#------------------- 基数排序 --------------------</span></span><br><span class="line"><span class="comment"># 确定排序的趟数</span></span><br><span class="line"><span class="comment"># 排序的顺序跟序列中最大数的位数相关</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">radix_sort_nums</span><span class="params">(L)</span>:</span></span><br><span class="line">    maxNum = L[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># 寻找序列中的最大数</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> L:</span><br><span class="line">        <span class="keyword">if</span> maxNum &lt; x:</span><br><span class="line">            maxNum = x</span><br><span class="line">    <span class="comment"># 确定序列中最大元素的位数</span></span><br><span class="line">    times = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span>(maxNum &gt; <span class="number">0</span>):</span><br><span class="line">        maxNum = (int)(maxNum/<span class="number">10</span>)</span><br><span class="line">        times = times + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> times</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到num从低到高第 pos 位的数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_num_pos</span><span class="params">(num, pos)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> ((int)(num/(<span class="number">10</span>**(pos<span class="number">-1</span>))))%<span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 基数排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">radix_sort</span><span class="params">(L)</span>:</span></span><br><span class="line">    <span class="comment"># 存放各个桶的数据统计值</span></span><br><span class="line">    count = <span class="number">10</span>*[<span class="keyword">None</span>]</span><br><span class="line">    <span class="comment"># 暂时存放排序结果</span></span><br><span class="line">    bucket = len(L)*[<span class="keyword">None</span>]</span><br><span class="line">    <span class="comment"># 从低位到高位依次循环</span></span><br><span class="line">    <span class="keyword">for</span> pos <span class="keyword">in</span> range(<span class="number">1</span>, radix_sort_nums(L)+<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 置空各个桶的数据统计值</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">10</span>):</span><br><span class="line">            count[x] = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 统计当前位数（个位，十位，百位...）的元素数目</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, len(L)):</span><br><span class="line">            <span class="comment"># 统计各个桶将要装进去的元素个数</span></span><br><span class="line">            j = get_num_pos(int(L[x]), pos)</span><br><span class="line">            count[j] = count[j] + <span class="number">1</span></span><br><span class="line">        <span class="comment"># count[i] 表示第 i 个桶的右边界索引</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">            count[x] = count[x] + count[x<span class="number">-1</span>]</span><br><span class="line">        <span class="comment"># 将数据依次装入桶中</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(len(L)<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">            <span class="comment"># 求出元素第 k 位的数字</span></span><br><span class="line">            j = get_num_pos(L[x], pos)</span><br><span class="line">            <span class="comment"># 放入对应的桶中，count[j]-1 是第 j 个桶的右边界索引</span></span><br><span class="line">            bucket[count[j]<span class="number">-1</span>] = L[x]</span><br><span class="line">            <span class="comment"># 对应桶的装入数据索引 -1</span></span><br><span class="line">            count[j] = count[j] - <span class="number">1</span></span><br><span class="line">        <span class="comment"># 将已分配好的桶中数据再倒出来，此时已是对应当前位数有序的表</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, len(L)):</span><br><span class="line">            L[x] = bucket[x]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;排序算法可以分为内部排序和外部排序，内部排序是数据记录在内存中进行排序，而外部排序是因排序的数据很大，一次不能容纳全部的排序记录，在排序过程
      
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://yz1509.github.io/categories/DataStructure-Algorithm/"/>
    
    
      <category term="归并排序" scheme="https://yz1509.github.io/tags/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    
      <category term="快排" scheme="https://yz1509.github.io/tags/%E5%BF%AB%E6%8E%92/"/>
    
      <category term="排序" scheme="https://yz1509.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
      <category term="直接插入排序" scheme="https://yz1509.github.io/tags/%E7%9B%B4%E6%8E%A5%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
    
      <category term="希尔排序" scheme="https://yz1509.github.io/tags/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/"/>
    
      <category term="简单选择排序" scheme="https://yz1509.github.io/tags/%E7%AE%80%E5%8D%95%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/"/>
    
      <category term="堆排序" scheme="https://yz1509.github.io/tags/%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    
      <category term="冒泡排序" scheme="https://yz1509.github.io/tags/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/"/>
    
      <category term="基数排序" scheme="https://yz1509.github.io/tags/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>分治算法</title>
    <link href="https://yz1509.github.io//posts/7474c898/"/>
    <id>https://yz1509.github.io//posts/7474c898/</id>
    <published>2018-07-18T13:59:06.000Z</published>
    <updated>2018-07-25T06:55:30.335Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分治的基本概念"><a href="#分治的基本概念" class="headerlink" title="分治的基本概念"></a>分治的基本概念</h1><p>把一个任务，分成形式和原任务相同，但规模更小的几个部分任务（通常是两个部分），分别完成，或只需要选一部分完成。然后再处理完成后的这一个或几个部分的结果，实现整个任务的完成。</p><h1 id="分治的典型应用"><a href="#分治的典型应用" class="headerlink" title="分治的典型应用"></a>分治的典型应用</h1><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p>二分查找函数中，为了防止 $L + R$ 过大益处，$mid = L + (R - L)/2$.</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><ul><li>输入n ( n&lt;= 100,000)个整数，找出其中的两个数，它们之和等于整数m(假定肯定有解)。题中所有整数都能用 int 表示。</li><li>POJ 2456: Aggressive cows</li></ul><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>数组排序任务可以如下完成：</p><ul><li>把前一半排序</li><li>把后一半排序</li><li>将两半归并到一个新的有序数组，然后再拷贝回原数组，排序完成。</li></ul><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>数组排序任务可以如下完成：</p><ul><li>设 $k = a[0]$，将 $k$ 挪到适当位置，使得比 $k$ 小的元素都在 $k$ 左边,比 $k$ 大的元素都在 $k$ 右边，和 $k$ 相等的，不关心在 $k$ 左右出现均可 （$O(n)$时间完成）</li><li>把 $k$ 左边的部分快速排序</li><li>把 $k$ 右边的部分快速排序</li></ul><h1 id="例题-1"><a href="#例题-1" class="headerlink" title="例题"></a>例题</h1><ul><li>输出前 $m$ 大的数<ul><li>应用快排的思想</li></ul></li><li>求排列的逆序数<ul><li>在归并排序的基础上完成</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;分治的基本概念&quot;&gt;&lt;a href=&quot;#分治的基本概念&quot; class=&quot;headerlink&quot; title=&quot;分治的基本概念&quot;&gt;&lt;/a&gt;分治的基本概念&lt;/h1&gt;&lt;p&gt;把一个任务，分成形式和原任务相同，但规模更小的几个部分任务（通常是两个部分），分别完成，或只需要选一
      
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://yz1509.github.io/categories/DataStructure-Algorithm/"/>
    
    
      <category term="二分查找" scheme="https://yz1509.github.io/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
      <category term="归并排序" scheme="https://yz1509.github.io/tags/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    
      <category term="快排" scheme="https://yz1509.github.io/tags/%E5%BF%AB%E6%8E%92/"/>
    
  </entry>
  
  <entry>
    <title>动态规划</title>
    <link href="https://yz1509.github.io//posts/a80d0031/"/>
    <id>https://yz1509.github.io//posts/a80d0031/</id>
    <published>2018-07-18T13:28:58.000Z</published>
    <updated>2018-07-25T06:55:14.848Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h1><p>Dynamic Programming (also known as dynamic optimization) is a method for solving a complex problem by breaking it down into a collection of simpler subproblems.</p><blockquote><p>本质:是对问题状态的定义和状态转移方程的定义。</p></blockquote><h1 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h1><h2 id="将原问题分解为子问题"><a href="#将原问题分解为子问题" class="headerlink" title="将原问题分解为子问题"></a>将原问题分解为子问题</h2><ul><li>把原问题分解为若干个子问题，子问题和原问题形式相同或类似，只不过规模变小了。子问题都解决，原问题即解决( 比如，数字三角形POJ1163）。</li><li>子问题的解一旦求出就会被保存，所以每个子问题只需求解一次。</li></ul><h2 id="确定状态"><a href="#确定状态" class="headerlink" title="确定状态"></a>确定状态</h2><p>在用动态规划解题时，我们往往将和子问题相关的各个变量的一组取值，称之为一个“状态”。一个“状态”对应于一个或多个子问题，所谓某个“状态”下的“值”，就是这个“状态”所对应的子问题的解。</p><p>所有“状态”的集合，构成问题的“状态空间”。“状态空间”的大小，与用动态规划解决问题的时间复杂度直接相关。在数字三角形的例子里，一共有$\frac{N\times(N + 1)}{2}​$个数字，所以这个问题的状态空间里一共就有$\frac{N\times(N + 1)}{2}​$个状态。</p><p>整个问题的时间复杂度是状态数目乘以计算每个状态所需时间。在数字三角形里每个“状态”只需要经过一次，且在每个状态上作计算所花的时间都是和N无关的常数。</p><p>用动态规划解题，经常碰到的情况是，K个整型变量构成一个状态（如数字三角形中的行号和列号这两个变量构成“状态”）。如果这K个整型变量的取值范围分别是$N_1, N_2, ……, N_k$，那么，我们就可以用一个K维的数组$array[N_1][N_2]……[N_k]$来存储各个状态的“值”。这个“值”未必就是一个整数或浮点数，可能是需要一个结构才能表示的，那么array就可以是一个结构数组。一个“状态”下的“值”通常会是一个或多个子问题的解。</p><h2 id="确定一些初始状态（边界状态）的值"><a href="#确定一些初始状态（边界状态）的值" class="headerlink" title="确定一些初始状态（边界状态）的值"></a>确定一些初始状态（边界状态）的值</h2><p>以“数字三角形”为例，初始状态就是底边数字，值就是底边数字值。</p><h2 id="确定状态转移方程"><a href="#确定状态转移方程" class="headerlink" title="确定状态转移方程"></a>确定状态转移方程</h2><p>定义出什么是“状态”，以及在该 “状态”下的“值”后，就要找出不同的状态之间如何迁移——即如何从一个或多个“值”已知的 “状态”，求出另一个“状态”的“值”(“人人为我”递推型)。状态的迁移可以用递推公式表示，此递推公式也可被称作“状态转移方程”。<br>数字三角形的状态转移方程:<br><img src="/posts/a80d0031/DP0201.jpg" alt="动态规划"></p><h1 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h1><p>在对状态和状态转移方程的定义过程中，需满足“最优子结构”，并且无后效性：</p><ul><li>最优子结构性质：如果问题的最优解所包含的子问题的解也是最优的，我们就称该问题具有最优子结构性质。</li><li>无后效性：当前的若干状态值一旦确定，则此后过程的演变就只和这若干个状态的值有关，和之前是采取哪种手段或经过哪条路径演变到当前的这若干个状态，没有关系。</li></ul><h1 id="和其他方法的异同"><a href="#和其他方法的异同" class="headerlink" title="和其他方法的异同"></a>和其他方法的异同</h1><ul><li>递推：每个阶段只有一个状态</li><li>贪心：每个阶段的最优状态都是由上一个阶段的最优状态得到</li><li>搜索：每个阶段的最优状态是由之前<strong>所有</strong>阶段的状态的组合得到</li><li>动态规划：每个阶段的最优状态可以从之前某个阶段的某个或某些状态直接得到而不管之前这个状态是如何得到的。</li></ul><h1 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h1><ul><li>递归到动态规划的一般转化方法：递归函数有n个参数，就定义一个n维的数组，数组的下标是递归函数参数的取值范围，数组元素的值是递归函数的返回值，这样就可以从边界值开始，逐步填充数组，相当于计算递归函数值的逆过程。</li><li>“缓存”，“重叠子问题”，“记忆化”，这三个名词，都是在阐述递推式求解的技巧。以Fibonacci数列为例，计算第100项的时候，需要计算第99项和98项；在计算第101项的时候，需要第100项和第99项，这时候你还需要重新计算第99项吗？不需要，你只需要在第一次计算的时候把它记下来就可以了。上述的需要再次计算的“第99项”，就叫“重叠子问题”。如果没有计算过，就按照递推式计算，如果计算过，直接使用，就像“缓存”一样，这种方法，叫做“记忆化”，这是递推式求解的技巧。这种技巧，通俗的说叫“花费空间来节省时间”。</li></ul><h1 id="动态规划的三种形式"><a href="#动态规划的三种形式" class="headerlink" title="动态规划的三种形式"></a>动态规划的三种形式</h1><ul><li>记忆递归型<ul><li>优点：只经过有用的状态，没有浪费。递推型会查看一些没用的状态，有浪费!</li><li>缺点：可能会因递归层数太深导致爆栈，函数调用带来额外时间开销。无法使用滚动数     组节省空间。总体来说，比递推型慢。</li></ul></li><li>“我为人人”递推型：没有什么明显的优势，有时比较符合思考的习惯。个别特殊题目中会比“人人为我”型节省空间。<img src="/posts/a80d0031/DP0701.png" width="550" height="350" alt="我为人人" align="center"></li><li>“人人为我”递推型：在选取最优备选状态的值$F_m, F_n, …, F_y$时，有可能有好的算法或数据结构可以用来显著降低时间复杂度。<img src="/posts/a80d0031/DP0702.png" width="500" height="300" alt="人人为我" align="center"></li></ul><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><ul><li>POJ 1163 数字三角形</li><li>POJ 2757 最长上升子序列</li><li>POJ 1458 最长公共子序列</li><li>POJ 2755 神奇的口袋</li><li>POJ 3624 0-1背包问题</li><li>POJ 1088 滑雪</li><li>POJ 1390 方盒游戏</li><li>POJ 2373 灌溉草场</li><li>最佳加法表达式：有一个由1..9组成的数字串.问如果将m个加号插入到这个数字串中,在各种可能形成的表达式中，值最小的那个表达式的值是多少</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h1&gt;&lt;p&gt;Dynamic Programming (also known as dynamic optimization) is a method f
      
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://yz1509.github.io/categories/DataStructure-Algorithm/"/>
    
    
      <category term="动态规划" scheme="https://yz1509.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
</feed>
